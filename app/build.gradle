apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.kotlin.android.extensions'

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ru.anisart.vv"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 45
        versionName "1.7"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        debug {}
        release {
            if (project.hasProperty("keys.repo")) {
                def projectPropsFile = file(project.property("keys.repo") + "vv.properties")
                if (projectPropsFile.exists()) {
                    Properties props = new Properties()
                    props.load(new FileInputStream(projectPropsFile))
                    storeFile file(file(project.property("keys.repo") + props['RELEASE_STORE_FILE']))
                    storePassword props['RELEASE_STORE_PASS']
                    keyAlias props['RELEASE_ALIAS']
                    keyPassword props['RELEASE_KEY_PASS']
                }
            } else {
                println "======================================================="
                println "[ERROR] - Please configure release-compilation environment - e.g. in ~/.signing directory"
                println "======================================================="
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a', 'armeabi'//select ABIs to build APKs for
            universalApk false //generate an additional APK that contains all the ABIs
        }
    }
    // map for the version code
    project.ext.versionCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 5, 'mips64': 6, 'x86': 8, 'x86_64': 9]

    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            output.versionCodeOverride =
                    android.defaultConfig.versionCode * 10000000 +
                            project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
    adbOptions {
        installOptions '-g', '-r'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    testImplementation 'junit:junit:4.12'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //    compile "org.jetbrains.kotlin:kotlin-android-extensions-runtime:$kotlin_version"
    implementation "com.github.hotchemi:permissionsdispatcher:$permission_dispatcher_version", {
        // if you don't use android.app.Fragment you can exclude support for them
        exclude module: "support-v13"
    }
    kapt "com.github.hotchemi:permissionsdispatcher-processor:$permission_dispatcher_version"
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:design:$support_version"
    implementation 'com.github.dmytrodanylyk.android-process-button:library:1.0.4'
    implementation "com.jakewharton:butterknife:$butterknife_version"
    kapt "com.jakewharton:butterknife-compiler:$butterknife_version"
    implementation 'com.github.codekidX:storage-chooser:2.0.4.4', {
        exclude group: 'com.android.support'
    }
    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:7.2.0@aar', {
        transitive = true
        exclude group: 'com.android.support'
        exclude module: 'play-services-location'
    }
    implementation 'com.google.android.gms:play-services-location:16.0.0'
    //    compile 'com.mapbox.mapboxsdk:mapbox-android-services:2.2.7@aar'
    //    compile 'com.mapbox.mapboxsdk:mapbox-java-services-rx:2.2.7'
    //    compile 'com.mapbox.mapboxsdk:mapbox-android-directions:1.0.0@aar'
    //    compile 'com.esri.geometry:esri-geometry-api:1.2.1'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.8'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.0'
    implementation 'com.jaredrummler:colorpicker:1.1.0'
    implementation 'com.github.clans:fab:1.6.4'
    implementation 'org.jetbrains.anko:anko-commons:0.10.8'
    implementation 'com.patloew.rxlocation:rxlocation:1.0.5'
    implementation 'com.google.firebase:firebase-core:16.0.8'
}
repositories {
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.google.com' }
}

def reportsDirectory = "$buildDir/reports/androidTests/connected"

def embedScreenshotsTask = task('embedScreenshots', group: 'reporting') {
    doFirst {
        def failureScreenshotsDirectory = new File(reportsDirectory, 'screenshots/failures')

        if (!failureScreenshotsDirectory.exists()) {
            println 'Could not find screenshot failures. Skipping...'
            return
        }

        failureScreenshotsDirectory.eachFile { failedTestClassDirectory ->
            def failedTestClassName = failedTestClassDirectory.name

            failedTestClassDirectory.eachFile { failedTestFile ->
                def failedTestName = failedTestFile.name
                def failedTestNameWithoutExtension = failedTestName.take(failedTestName.lastIndexOf('.'))
                def failedTestClassJunitReportFile = new File(reportsDirectory, "${failedTestClassName}.html")

                if (!failedTestClassJunitReportFile.exists()) {
                    println "Could not find JUnit report file for test class '${failedTestClassJunitReportFile}'"
                    return
                }

                def failedTestJunitReportContent = failedTestClassJunitReportFile.text

                def patternToFind = "<h3 class=\"failures\">${failedTestNameWithoutExtension}</h3>"
                def patternToReplace = "${patternToFind} <img src=\"screenshots/failures/${failedTestClassName}/${failedTestName}\" width =\"360\" />"

                failedTestJunitReportContent = failedTestJunitReportContent.replaceAll(patternToFind, patternToReplace)

                failedTestClassJunitReportFile.write(failedTestJunitReportContent)
            }
        }
    }
}

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', '/sdcard/Pictures/VV'
    finalizedBy {
        embedScreenshotsTask
    }
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', '/sdcard/Pictures/VV'
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', '/sdcard/Pictures/VV/.', reportsDirectory
    finalizedBy {
        clearScreenshotsTask
    }

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}

apply plugin: 'com.google.gms.google-services'